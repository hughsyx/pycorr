################################################
# noise_availability_plot.py 
# Laurent Stehly (UGA)
# email: pycorr@univ-grenoble-alpes.fr
# Sept 2020
################################################

#!/usr/bin/env python3

#import cartopy.io.img_tiles as cimgt
from obspy.core import UTCDateTime
from cartopy.io.img_tiles import Stamen
import matplotlib.pyplot as plt
from obspy.geodetics import locations2degrees
import cartopy.crs as ccrs
from scipy.io import loadmat
from matplotlib.cm import get_cmap 
import sys, os, glob
import numpy as np 

import ipdb
import m_pycorr.mods.dd as dd

def plot_all_set_of_stations_single_map(in_dir='availability',block=True,save=False,**kargs) :
	''' make a single map showing the availability of all set of station whos availability files are in in_dir
		INPUT :
			in_dir : directory containing all station availability files generated by noise_availability_measure 
			save   : do we save the figure in plot/noise_db/availability_map_all_sets.png ? [True/False]
			**kargs: optional arguments passed down to mk_plot 
	'''
	# first determing automatically the right edge : 
	minlon = 1000 
	maxlon = -1000 
	minlat = 100
	maxlat = -1000
	year1 = 9999
	year2 = 0
	in_files = glob.glob(in_dir+'/av_*.mat') 
	for ifile in in_files :
		av=loadmat(ifile)
		map_edge = map_get_edge(av['lon'],av['lat'],dx=7,dy=7) 
		minlon=min(map_edge[0],minlon)
		maxlon=max(map_edge[1],maxlon)
		minlat=min(map_edge[2],minlat)
		maxlat=max(map_edge[3],maxlat)
		#ndate = max(av['av'].sum(axis=1)) # on garde le nombre de jour de la station qui en a lex +
		for idate in av['date_python'][0] :
			cyear =	UTCDateTime(idate).year
			year1 = min(year1,cyear)
			year2 = max(year2,cyear)
	map_edge=[minlon,maxlon,minlat,maxlat]


	# replace default input by user inputs :
	map_edge_set_by_user= False 
	if 'map_edge' in kargs :
		aa= kargs['map_edge'].split(',')
		map_edge[0] = float(aa[0])
		map_edge[1] = float(aa[1])
		map_edge[2] = float(aa[2])	
		map_edge[3] = float(aa[3])	
		map_edge_set_by_user= True
	if 'year1' in kargs :
		year1 = int(kargs['year1'])
	if 'year2' in kargs :
		year2 = int(kargs['year2'])
	ndate = 365*(year2-year1+1)
	if 'vmin' not in kargs :
		kargs['vmin']=0 
	if 'vmax' not in kargs :
		kargs['vmax']=ndate
	dpi=300
	if 'dpi' in 'kargs' :
		dpi = kargs['dpi']

	# add options suitable to plot all set of stations in a single plot : 
	kargs['block']=False
	kargs['save']=False 
	kargs['map_edge']=map_edge 

	# define title :
	kargs['title'] = 'data availability '+str(year1)+'-'+str(year2)
	# now lets do the plot :
	nfile = len(in_files)
	for k,ifile in enumerate(in_files) :
		# init the plot only for the 1st iteration : 
		kargs['init']=False 
		if k==0 :
			kargs['init']=True 
		if k==nfile-1 :
			kargs['block']=block 
		mk_plot(ifile,**kargs)#map_edge=map_edge,block=False,init=init)

	# finally save the figure if requested :
	if save == True :
		out_dir = 'plot/noise_db/';
		mkdir(out_dir)
		out_file = 'availability_map_all_sets'
		if map_edge_set_by_user :
			out_file = out_file +'__zoom_'
			out_file = out_file+str(map_edge[0])+'_'+str(map_edge[1])+'_'+str(map_edge[2])+'_'+str(map_edge[3])
		out_file = out_file + '__'+str(year1)+'_'+str(year2)
		out_file = out_file+'.png'
		plt.savefig(out_dir+'/'+out_file,dpi=300,tranparent=True)



def plot_all_set_of_stations(in_dir='availability',**kargs) :
	in_dir='availability'
	in_files = glob.glob(in_dir+'/av_*.mat') 
	plt.clf()
	for ifile in in_files :
		print(ifile)
		mk_plot(in_file=ifile,**kargs)
		


def mk_plot(in_file,cl=True, block=None,init=True,topo=False,vmin=None,vmax=None,ss=100,save=False,res=None,map_edge=None, year1=-1, year2=9999, title=None,title_auto=False,rm_sta_wo_data=False) :
	''' INPUT :
		in_file   : path to the availability file to be plotted. Ex : in_file = 'availability/av_CH.mat'
		topo      : True/False/1/0 : plot topography or not 
		cl        : True/False/1/0 : plot coastline or not 
		vmin/vmax : lower/upper limit of the colorbar 
		ss        : station size
		print     : True/False/1/0 : should we output a png file in plot/noise_db/availability_XX.png
	'''
	# first we need to convert input coming from command line argument :
	ss = int(ss)
	if not res  == None : res  = int(res)
	if type(cl) == str   : cl = bool(int(cl))
	if type(topo) == str : topo = bool(int(topo))
	if type(block) == str : block=bool(int(block))
	if type(init)  == str  : init=bool(int(init))
	if type(save) == str  : save = bool(int(save))
	year1 = int(year1)
	year2 = int(year2)
	if type(map_edge)==str : 
		xx=map_edge.split(',')
		map_edge=[float(xx[0]),float(xx[1]),float(xx[2]),float(xx[3])]


	# load availability file :
	av = loadmat(in_file)

	if len(av['lon']) ==0 :
		print('sorry there is no station in the file => no plot')
		return

	if map_edge==None :
		map_edge = map_get_edge(av['lon'],av['lat'],dx=7,dy=7)

	# if we initialize a new map (and do not just add more stations to an existing map)
	if init :
		plt.clf()
		ax = plt.axes(projection=Stamen('terrain-background').crs)
		ax.set_extent(map_edge,crs=ccrs.Geodetic())	

		# optionaly add coastline
		if cl : 
			map_add_coastline(ax,map_edge)

		#optionaly add topography :
		if topo :
			if res==None :
				res = get_resolution(map_edge)
			ax.add_image(Stamen('terrain-background'),res)

		gl =ax.gridlines(draw_labels=True)
		gl.xlabels_top = False
		gl.ylabels_right = False
		if title :
			plt.suptitle(title, fontsize=12)

	ax = plt.gca()
	cmap = get_cmap('tab20b')

	# get the index of the right years : 
	nday = len(av['date_python'][0])
	year = np.zeros(nday) 
	for iday in range(0,nday) :
		year[iday] = UTCDateTime(av['date_python'][0][iday]).year

	I1 = np.where(year >= year1)

	if I1[0].size > 0  :
		I1 = I1[0][0]
	else : 
		I1= None 
	I2 = np.where(year <= year2)
	if I2[0].size > 0 :
		I2 = I2[0][-1] 
	else :
		I2= None

	#do the scatter plot if we have some data : 
	if not (I1==None) and (not (I2==None)) :
		col = av['av'][:,I1:I2].sum(axis=1)
		if rm_sta_wo_data :
			I_sta=np.where(col>0)[0]
		else :
			I_sta = np.arange(0,len(col)-1)
		sc=ax.scatter(av['lon'][0][I_sta],av['lat'][0][I_sta],c=col[I_sta],s=ss, cmap = cmap, marker='^',transform=ccrs.Geodetic(),alpha=1, edgecolors='k',vmin=vmin, vmax=vmax)
	else :
		sc=ax.scatter(0,0)

	if title_auto : 
		nsta_file = len(col)
		nsta_cyear = len(I_sta)
		nsta_300 = len(np.where(col>300)[0])
		titre = in_file + ': '+str(year1)+'-'+str(year2)+' : '
		titre = titre+'  '+str(nsta_300)+ ' station with more than 300 days of data \n'
		titre = titre+str(nsta_cyear)+' stations found for this period of time \n '
		titre = titre+str(nsta_file)+' stations requested for any year'
		plt.suptitle(titre, fontsize=12)

	if init :
		plt.colorbar(sc)
	
	# save plot :
	if save :
		set_name = in_file.split('/')[1].split('_')[1].split('.')[0]
		out_dir='plot/noise_db'
		out_file = out_dir+'/availability_map_'+set_name+'__'+str(year1)+'_'+str(year2)+'.png'
		if not os.path.isdir(out_dir) :
			os.makedirs(out_dir)
		plt.savefig(out_file)
	else :
		plt.show(block=block)


def map_add_coastline(ax,map_edge) :
	minlon = map_edge[0]
	maxlon = map_edge[1]
	minlat = map_edge[2]
	maxlat = map_edge[3]
	r = int(locations2degrees(minlat,minlon,maxlat,maxlon)*111)
	if r <= 1000 :
		ax.coastlines('10m')
	if r > 1000 and r <= 5000:
		ax.coastlines('50m')    
	if r > 5000 and r <= 10000: 
		ax.coastlines('110m')
	if r > 10000: 
		ax.coastlines('110m')



def get_resolution(map_edge) :
	minlon = map_edge[0]
	maxlon = map_edge[1]
	minlat = map_edge[2]
	maxlat = map_edge[3]
	r = int(locations2degrees(minlat,minlon,maxlat,maxlon)*111)

	if r <= 1000 :
		res=8
	if r > 1000 and r <= 5000:
		res = 6
	if r > 5000 and r <= 10000: 
		res = 4
	if r > 10000: 
		res = 2
	return res 


def map_get_edge(lon,lat,dx=7,dy=7) :
	minlon = lon.min()
	maxlon = lon.max() 
	minlat = lat.min()
	maxlat = lat.max()

	dx = (maxlon - minlon)/dx 
	dy = (maxlat - minlat)/dy

	minlon = minlon -dx
	maxlon = maxlon +dx 
	minlat = minlat - dy
	maxlat = maxlat + dy

	return [minlon, maxlon, minlat, maxlat]


#------------------------------------------------
def dispc(text,color,attr) :
    # print text in color with attribute attr ! 
    if color =='r' :
        ncolor=31
    elif color=='g' :
        ncolor=32 
    elif color=='y' :
        ncolor=33
    elif color=='b' :
        ncolor=34
    elif color=='m' :
        ncolor=35
    elif color=='c' :
        ncolor=36
    elif color=='w' :
        ncolor=37
    elif color=='gray' :
        ncolor=38

    if attr=='b' :
        prefix='\x1b[1m';
    elif attr=='d' :
        prefix='\x1b[2m';
    elif attr=='u' :
        prefix ='\x1b[4m';
    elif attr=='blink' :
        prefix ='\x1b[5m'
    elif attr=='r' :
        prefix='\x1b[7m'
    else :
        prefix=''


    str_=prefix+'\x1b['+str(ncolor)+'m'+text+'\x1b[0m';
    print(str_)


def dispc_help(text1,text2,text3,length,length2=40,col1 = 37, col2=37, col3 = 38) :
    prefix='\x1b[1m';
    str_=prefix+'\x1b['+str(col1)+'m'+text1.ljust(length,' ')+':'+'\x1b[0m';
    str_=str_+'\x1b['+str(col2)+'m  '+text2.ljust(length2,' ')+'\x1b[0m';
    str_=str_+'\x1b['+str(col3)+'m'+text3[0:50]+'\x1b[0m';
    str_ = str_.replace('\n','')
    print(str_)



def mkdir(dir_name) : 
	if not os.path.isdir(dir_name) : 
		try :
			os.makedirs(dir_name)
			return True 
		except :
			return False
	else :
		return False 

#----------------------------------------------------------------
#                     PRINT USAGE : 
#----------------------------------------------------------------
def print_usage() :
	dx = 15 
	c1=31 
	c2=33
	c3=32
	print('')
	print('------------------------------')
	str1 = 'USAGE with a single file '
	str2 = 'noise_plot_availability availability/av_toto.mat'
	str3 = ' ss=100 vmin=3 vmax=100 topo=0 cl=1 save=0'
	dispc_help(str1,str2,str3,4)

	str1 = 'Single map with all set of stations  '
	str2 = 'noise_plot_availability availability single'
	str3 = ' ss=100 ... block option not usable'
	print('')
	dispc_help(str1,str2,str3,4)

	print('')
	str1 = 'One map per set of stations '
	str2 = 'noise_plot_availability availability multi'
	str3 = ' ss=100 vmin=3 vmax=100 ...'
	dispc_help(str1,str2,str3,4)
	dispc_help('       ss','station size ','[100]',dx,40,c1,c2,c3)
	dispc_help('       vmin','lower limit of the colorbarstation size ','[0]',dx,40,c1,c2,c3)
	dispc_help('       vmax','upper limit of the colorbarstation size ','[100]',dx,40,c1,c2,c3)
	dispc_help('       topo','plot the background topography','[0/1]',dx,40,c1,c2,c3)
	dispc_help('       cl', 'plot coastlines','[0/1]',dx,40,c1,c2,c3)
	dispc_help('       save', 'save the figure in plot/noise_db/','[0/1]',dx,40,c1,c2,c3)
	dispc_help('       res','resolution of the topo','[1,2,4,6,8]',dx,40,c1,c2,c3)
	dispc_help('       year1','first year ','2016',dx,40,c1,c2,c3)
	dispc_help('       year2','last year ','2017',dx,40,c1,c2,c3)
	dispc_help('       map_edge',' lon,lat     ','-10,30,40,50',dx,40,c1,c2,c3)
	dispc_help('       dpi','default =300 ','300',dx,40,c1,c2,c3)

#--------------------------------------------------------------
#                         MAIN 
#--------------------------------------------------------------
if __name__ == "__main__"  : 
	# call the function without argument : 
	narg = len(sys.argv)
	if narg == 1 :#
		print_usage()
	# call the function like noise_availability_plot availability/av_FR.mat :
	elif os.path.isfile(sys.argv[1]) : 
		in_file = sys.argv[1]	
		# read user input : 
		inu={}
		for iarg in sys.argv[2:] :
			option_name = iarg.split('=')[0]
			option_value = iarg.split('=')[1]
			inu[option_name] = option_value
		inu['block']=True
		mk_plot(in_file,**inu)

	# call the function with a dir : noise_availability_plot availability [single/multi[] vmin=xx
	elif os.path.isdir(sys.argv[1]) and narg > 2:
		in_dir = sys.argv[1]	
		type_  = sys.argv[2]
		# read user input : 
		inu={}
		for iarg in sys.argv[3:] :
			option_name = iarg.split('=')[0]
			option_value = iarg.split('=')[1]
			inu[option_name] = option_value

		if type_ =='multi' :
			plot_all_set_of_stations(in_dir,**inu)

		if type_ == 'single' :
			# we do not save the plot except if user specify the opposit :
			save = False 
			if 'save' in inu :
				save = bool(int(inu['save']))
				del inu['save']
			if save == True :
				plot_all_set_of_stations_single_map(in_dir,save=save,block=False,**inu) 
			else :
				plot_all_set_of_stations_single_map(in_dir,save=save,block=True,**inu) 

